[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mlfcrafter"
version = "0.1.0"
description = "ML Pipeline Automation Framework - Chain together data processing, model training, and deployment with minimal code"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Burak Civelek", email = "burakcivelekk61@gmail.com"}
]
maintainers = [
    {name = "Burak Civelek", email = "burakcivelekk61@gmail.com"}
]
keywords = [
    "machine-learning", 
    "pipeline", 
    "automation", 
    "data-science", 
    "ml-ops",
    "automl",
    "scikit-learn",
    "data-processing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Data Scientists",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
requires-python = ">=3.8"
dependencies = [
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "xgboost>=2.0.0",
    "joblib>=1.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.12.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.6.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
]

[project.urls]
Homepage = "https://github.com/brkcvlk/mlfcrafter"
Repository = "https://github.com/brkcvlk/mlfcrafter"
"bug-report" = "https://github.com/brkcvlk/mlfcrafter/issues"

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I", "UP", "N", "B", "A", "C4", "T20", "PT"]
ignore = ["N806"]  # Allow ML convention variable names like X, y

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
# Import organization
force-single-line = false
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
# Tests can use assert statements and relative imports
"tests/*.py" = ["B011", "F401", "F811"]
"example.py" = ["T20"]  # Allow print statements in examples







 