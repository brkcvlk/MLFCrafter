name: 📝 Generate Release Notes

on:
  release:
    types: [created]

# Required permissions for release updates
permissions:
  contents: write

jobs:
  generate-release-notes:
    name: 📝 Generate Categorized Release Notes
    runs-on: ubuntu-latest
    # Only repository owner can generate release notes
    if: github.actor == github.repository_owner
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📝 Generate Categorized Changelog
      run: |
        python << 'EOF'
        import subprocess
        import re
        import os

        # Get current tag
        current_tag = os.environ.get('GITHUB_REF', '').replace('refs/tags/', '')
        
        # Get previous tag
        try:
            result = subprocess.run(['git', 'describe', '--tags', '--abbrev=0', 'HEAD~1'], 
                                  capture_output=True, text=True, check=False)
            previous_tag = result.stdout.strip() if result.returncode == 0 else None
        except:
            previous_tag = None
        
        # Special handling for first release
        is_first_release = previous_tag is None
        
        if is_first_release:
            print(f"🎉 First release detected! Generating changelog for {current_tag}")
            print("📋 Including all commits from repository history")
        else:
            print(f"📋 Generating changelog from {previous_tag} to {current_tag}")
        
        # Get commits
        if previous_tag:
            cmd = ['git', 'log', '--pretty=format:%H|%s', f'{previous_tag}..HEAD']
        else:
            # First release - get all commits but limit to reasonable number
            cmd = ['git', 'log', '--pretty=format:%H|%s', '--max-count=50']
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
        
        print(f"📊 Found {len(commits)} commits to process")
        
        # Categorize commits
        categories = {
            'features': [],
            'bugfixes': [],
            'docs': [],
            'performance': [],
            'refactor': [],
            'chore': [],
            'breaking': [],
            'other': []
        }
        
        for commit_line in commits:
            if '|' not in commit_line:
                continue
                
            hash_part, message = commit_line.split('|', 1)
            hash_short = hash_part[:7]
            
            # Skip merge commits for cleaner changelog
            if message.startswith(('Merge branch', 'Merge pull request')):
                continue
                
            # Categorize based on conventional commits
            if message.startswith(('feat:', 'feat(', 'feature:')):
                msg = re.sub(r'^feat[:(].*?[)]?:?\s*', '', message)
                categories['features'].append(f"- {msg} ([{hash_short}](https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commit/{hash_part}))")
            elif message.startswith(('fix:', 'fix(')):
                msg = re.sub(r'^fix[:(].*?[)]?:?\s*', '', message)
                categories['bugfixes'].append(f"- {msg} ([{hash_short}](https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commit/{hash_part}))")
            elif message.startswith(('docs:', 'docs(')):
                msg = re.sub(r'^docs[:(].*?[)]?:?\s*', '', message)
                categories['docs'].append(f"- {msg} ([{hash_short}](https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commit/{hash_part}))")
            elif message.startswith(('perf:', 'perf(')):
                msg = re.sub(r'^perf[:(].*?[)]?:?\s*', '', message)
                categories['performance'].append(f"- {msg} ([{hash_short}](https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commit/{hash_part}))")
            elif message.startswith(('refactor:', 'refactor(')):
                msg = re.sub(r'^refactor[:(].*?[)]?:?\s*', '', message)
                categories['refactor'].append(f"- {msg} ([{hash_short}](https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commit/{hash_part}))")
            elif message.startswith(('chore:', 'chore(', 'ci:', 'ci(')):
                msg = re.sub(r'^(chore|ci)[:(].*?[)]?:?\s*', '', message)
                categories['chore'].append(f"- {msg} ([{hash_short}](https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commit/{hash_part}))")
            elif '!' in message or 'BREAKING CHANGE' in message:
                categories['breaking'].append(f"- {message} ([{hash_short}](https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commit/{hash_part}))")
            else:
                categories['other'].append(f"- {message} ([{hash_short}](https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commit/{hash_part}))")
        
        # Build changelog
        if is_first_release:
            changelog = f"## 🎉 MLFCrafter {current_tag} - Initial Release!\n\n"
            changelog += "Welcome to **MLFCrafter** - the ML Pipeline Automation Framework! 🚀\n\n"
            changelog += "This is our very first release, packed with features to make your ML workflows simple and powerful.\n\n"
        else:
            changelog = f"## 🎉 What's Changed in {current_tag}\n\n"
        
        # Count total changes
        total_changes = sum(len(cat) for cat in categories.values())
        if total_changes > 0:
            changelog += f"**{total_changes} changes** in this release:\n\n"
        
        if categories['breaking']:
            changelog += "### 💥 **BREAKING CHANGES**\n" + "\n".join(categories['breaking']) + "\n\n"
        
        if categories['features']:
            changelog += "### ✨ **Features Added**\n" + "\n".join(categories['features']) + "\n\n"
        
        if categories['bugfixes']:
            changelog += "### 🐛 **Bug Fixes**\n" + "\n".join(categories['bugfixes']) + "\n\n"
        
        if categories['performance']:
            changelog += "### ⚡ **Performance Improvements**\n" + "\n".join(categories['performance']) + "\n\n"
        
        if categories['refactor']:
            changelog += "### 🔧 **Code Refactoring**\n" + "\n".join(categories['refactor']) + "\n\n"
        
        if categories['docs']:
            changelog += "### 📚 **Documentation**\n" + "\n".join(categories['docs']) + "\n\n"
        
        if categories['chore']:
            changelog += "### 🏗️ **Maintenance & CI**\n" + "\n".join(categories['chore']) + "\n\n"
        
        if categories['other']:
            changelog += "### 📦 **Other Changes**\n" + "\n".join(categories['other']) + "\n\n"
        
        # Add installation section for first release
        if is_first_release:
            changelog += "## 🚀 **Getting Started**\n\n"
            changelog += "Install MLFCrafter and start building ML pipelines in minutes:\n\n"
            changelog += f"```bash\npip install mlfcrafter=={current_tag.lstrip('v')}\n```\n\n"
            changelog += "**Quick Example:**\n"
            changelog += "```python\n"
            changelog += "from mlfcrafter import MLFChain, DataIngestCrafter, ModelCrafter\n\n"
            changelog += "# Build ML pipeline in 3 lines\n"
            changelog += "chain = MLFChain(\n"
            changelog += "    DataIngestCrafter('data.csv'),\n" 
            changelog += "    ModelCrafter(model_type='random_forest')\n"
            changelog += ")\n"
            changelog += "results = chain.run(target_column='target')\n"
            changelog += "```\n\n"
        
        # Add footer
        changelog += "---\n\n"
        if previous_tag:
            changelog += f"**Full Changelog**: https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/compare/{previous_tag}..{current_tag}\n"
        else:
            changelog += f"**Full Changelog**: https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/commits/{current_tag}\n"
        
        if not is_first_release:
            changelog += f"\n**Install this version:**\n```bash\npip install mlfcrafter=={current_tag.lstrip('v')}\n```"
        
        # Save changelog
        with open('changelog.md', 'w', encoding='utf-8') as f:
            f.write(changelog)
        
        print("✅ Changelog generated successfully!")
        print("=" * 50)
        print(changelog)
        print("=" * 50)
        EOF

    - name: 📋 Update Release Notes
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const changelog = fs.readFileSync('changelog.md', 'utf8');
          
          // Get current release
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          
          // Update release with new body
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.data.id,
            body: changelog
          });
          
          console.log('✅ Release notes updated with categorized changelog!');

    - name: 📄 Upload changelog artifact
      uses: actions/upload-artifact@v4
      with:
        name: changelog-${{ github.ref_name }}
        path: changelog.md 
